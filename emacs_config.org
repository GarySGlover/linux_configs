#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes
* Init Config
** Setup Package Repos
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/") 
                                  ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package) 
          (package-install 'use-package))

  ;; (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Start emacs server
#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p) 
          (server-start))
#+end_src
** Enabled the disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src
** Remove startup message
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
** Remove GUI components
#+begin_src emacs-lisp
  ; (scroll-bar-mode -1)                    ; Disable visible scrollbar
  ; (tool-bar-mode -1)                      ; Disable the toolbar
  ; (tooltip-mode -1)                       ; Disable tooltips
  (set-fringe-mode 10)                    ; Give some breathing room
  ; (menu-bar-mode -1)                      ; Disable the menu bar
#+end_src
** Remove Unwanted Inbuilt Shortcuts
#+begin_src emacs-lisp
  ; (global-unset-key (kbd "C-x C-c"))
#+end_src
** Disable symbolic link notice
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Use short answers
#+begin_src emacs-lisp
  (setq use-short-answers t)
#+end_src
** Setup Themes
#+begin_src emacs-lisp
  ;; Set up the visible bell
  (setq visible-bell t)

  (set-face-attribute 'default nil 
          :font "Fira Code Retina" 
          :height 100)

  (use-package 
          all-the-icons)
  ;; :init
  ;; (all-the-icons-install-fonts t)

  (use-package 
          doom-modeline 
          :ensure t 
          :init (doom-modeline-mode 1) 
          :custom ((doom-modeline-height 15)))

  (use-package 
          doom-themes 
          :init (load-theme 'doom-dracula t))
#+end_src
** Backup / Lock files locations
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/emacs_backup")))
  (setq create-lockfiles nil)
#+end_src
** Shell Mode
*** eshell
#+begin_src emacs-lisp
  (defun efs/configure-eshell () 
          (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
          (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
          (setq eshell-history-size 10000 eshell-buffer-maximum-lines 10000 eshell-hist-ignoredups t
                  eshell-scroll-to-bottom-on-input t)
          (setq eshell-visual-commands (append eshell-visual-commands '("bash" "zsh" "bluetuith"))))

  (use-package 
          eshell-git-prompt)

  (use-package 
          eshell 
          :hook (eshell-first-time-mode . efs/configure-eshell)
          :config (with-eval-after-load 'esh-opt 
                          (setq eshell-destroy-buffer-when-process-dies t))
          (eshell-git-prompt-use-theme 'powerline))
#+end_src
** Buffer auto revert
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-c m a" . mc/edit-beginnings-of-line)
	   ("C-c m r" . mc/mark-all-like-this))
    )
#+end_src
* Package Installs No config
** Hydra
package - hydra
https://github.com/abo-abo/hydra
https://www.youtube.com/watch?v=xaZMwNELaJY&t=2975s
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
** General
package - general
https://github.com/noctuid/general.el
https://www.youtube.com/watch?v=xaZMwNELaJY&t=820s
https://www.youtube.com/watch?v=xaZMwNELaJY&t=3260s
#+begin_src emacs-lisp
  (use-package general)
#+end_src
** Epub Reader
#+begin_src emacs-lisp
  (use-package nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
** Whole line kill
#+begin_src emacs-lisp
  (use-package whole-line-or-region)
#+end_src
* Help
** Which Key
#+begin_src emacs-lisp
  (use-package 
          which-key 
          :init (which-key-mode) 
          :diminish which-key-mode 
          :config)
#+end_src
** Helpful
#+begin_src emacs-lisp
  (use-package 
          helpful 
          :custom (counsel-describe-function-function #'helpful-callable) 
          (counsel-describe-variable-function #'helpful-variable) 
          :bind ([remap describe-function] . counsel-describe-function) 
          ([remap describe-command] . helpful-command) 
          ([remap describe-variable] . counsel-describe-variable) 
          ([remap describe-key] . helpful-key))
#+end_src
** Keycast
#+begin_src emacs-lisp
  (use-package 
          keycast 
          :init (keycast-tab-bar-mode))
#+end_src
* Buffer Editing
** Tabs and indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default lisp-indent-offset 4)
#+end_src
** Org Mode
*** Babel shell mode
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
#+end_src
*** Org mode bullets
#+begin_src emacs-lisp
  (use-package 
          org-bullets 
          :after org 
          :hook (org-mode . org-bullets-mode))
#+end_src
*** Org templates
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
*** Source Code Edit Buffer
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
** Rainbox Delimeters
#+begin_src emacs-lisp
  (use-package 
          rainbow-delimiters 
          :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Column ruler
#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook term-mode-hook shell-mode-hook treemacs-mode-hook eshell-mode-hook)) 
          (add-hook mode (lambda () 
                                 (display-line-numbers-mode 0))))
#+end_src

** Line commenting
#+begin_src emacs-lisp
  (use-package 
          evil-nerd-commenter 
          :bind ("C-;" . evilnc-comment-or-uncomment-lines))
#+end_src
* Window Management
** Window Management
#+begin_src emacs-lisp
  (defhydra hydra-windows (global-map "s-j" :hint nil)
          ("e" (clover/font-size-increase 5)) 
          ("q" (clover/font-size-decrease 5)) 
          ("i" windmove-up) 
          ("k" windmove-down) 
          ("j" windmove-left) 
          ("l" windmove-right))
  (general-define-key "M-o" 'other-window)
#+end_src
** Window resizing
#+begin_src emacs-lisp
  (use-package resize-window
    :bind (("C-c r" . resize-window)))
#+end_src
** Display buffer
#+begin_src emacs-lisp
  (defun display-buffer-from-compilation-p (_buffer-name _action) 
    (unless current-prefix-arg (with-current-buffer (window-buffer) 
                                 (derived-mode-p 'compilation-mode))))

  (push '(display-buffer-from-compilation-p display-buffer-same-window (inhibit-same-window . nil))
    display-buffer-alist)
#+end_src
* Completion
** Counsel
#+begin_src emacs-lisp
  (use-package 
          counsel 
          :bind (("M-x" . counsel-M-x) 
                        ("C-x b" . counsel-switch-buffer) 
                        ("C-x C-f" . counsel-find-file) 
                        :map minibuffer-local-map ("C-r" . 'counsel-minibuffer-history)) 
          :custom (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only) 
          :config (setq ivy-initial-inputs-alist nil) 
          (setq counsel-switch-buffer-preview-virtual-buffers nil))
#+end_src
** Ivy
#+begin_src emacs-lisp
  (use-package 
          swiper 
          :ensure t)

  (use-package 
          ivy 

          :diminish 
          :bind (("C-s" . swiper) :map ivy-minibuffer-map ("TAB" . ivy-alt-done) 
                        ("C-l" . ivy-alt-done) 
                        ("C-j" . ivy-next-line) 
                        ("C-k" . ivy-previous-line) 
                        :map ivy-switch-buffer-map ("C-k" . ivy-previous-line) 
                        ("C-l" . ivy-done) 
                        ("C-d" . ivy-switch-buffer-kill) 
                        :map ivy-reverse-i-search-map ("C-k" . ivy-previous-line) 
                        ("C-d" . ivy-reverse-i-search-kill)) 
          :config (ivy-mode 1))

  (use-package 
          ivy-rich 
          :init (ivy-rich-mode 1))
#+end_src
* Development
** Treemacs
#+begin_src emacs-lisp
  (use-package 
          treemacs)
  (general-define-key "C-c d" 'treemacs-select-window)
#+end_src
** Projectile
Main Project
https://github.com/bbatsov/projectile
Projectile Documentation
https://docs.projectile.mx/projectile/index.html
Counsel Integration
https://github.com/ericdanan/counsel-projectile
#+begin_src emacs-lisp
  (use-package 
          projectile 
          :diminish projectile-mode 
          :config (projectile-mode) 
          :bind-keymap ("C-c p" . projectile-command-map) 
          :init (setq projectile-switch-project-action #'projectile-dired))

  ;; Projectile Counsel
  (use-package 
          counsel-projectile 
          :after projectile 
          :config (counsel-projectile-mode 1))
#+end_src
** Magit
Github page
https://github.com/magit/magit
Manual
https://magit.vc/manual/magit/
#+begin_src emacs-lisp
  (use-package 
          magit 
          :commands (magit-status magit-get-current-branch) 
          :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1) 
          :bind ("C-c g" . magit-status))
#+end_src
** LSP Mode Setup
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup () 
          (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols)) 
          (lsp-headerline-breadcrumb-mode))

  (use-package 
          lsp-mode 
          :commands (lsp lsp-deferred) 
          :init (setq lsp-keymap-prefix "C-c l") 
          :config (lsp-enable-which-key-integration t) 
          :hook (lsp-mode . efs/lsp-mode-setup))
#+end_src
*** LSP UI
#+begin_src emacs-lisp
  (use-package 
          lsp-ui 
          :hook (lsp-mode . lsp-ui-mode))
#+end_src
*** LSP Treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src
*** LSP Ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy)
#+end_src
** Company Mode Completions
#+begin_src emacs-lisp
  (use-package 
          company 
          :after lsp-mode 
          :hook (prog-mode . company-mode) 
          :bind (:map company-active-map
                        ("<tab>" . company-complete-selection)) 
          (:map lsp-mode-map 
                  ("<tab>" . company-indent-or-complete-common)) 
          :custom (company-minimum-prefix-length 1) 
          (company-idle-delay 0.0))

  (use-package 
          company-box 
          :hook (company-mode . company-box-mode))
#+end_src
** Languages
*** Elisp
#+begin_src emacs-lisp
  (use-package 
          elisp-format 
          :bind (:map emacs-lisp-mode-map
                        ("C-c f" . elisp-format-buffer)))
#+end_src
*** Powershell
#+begin_src emacs-lisp
  (use-package 
          ob-powershell)
  (use-package 
          powershell)
#+end_src
*** Terraform
#+begin_src emacs-lisp
  (use-package 
          terraform-mode 
          :hook (terraform-mode . lsp-deferred))
#+end_src
*** YAML
#+begin_src emacs-lisp
  (use-package 
          yaml-mode 
          :hook (yaml-mode . lsp-deferred))
#+end_src
* Clover Functions
** Font Size Management
#+begin_src emacs-lisp
  (defun clover/set-frame-font-size (SIZE) 
          (interactive "nFont Size: ") 
          (set-face-attribute 'default (selected-frame) 
                  :height SIZE))

  (defun clover/font-size-increase (BY) 
          (interactive "nFont Size Increase Amount: ") 
          (let ((height (face-attribute 'default 
                                :height (selected-frame)))) 
                  (clover/set-frame-font-size (+ BY height))))

  (defun clover/font-size-decrease (BY) 
          (interactive "nFont Size Decrease Amount: ") 
          (clover/font-size-increase (- BY)))
#+end_src
** Buffer Filters
#+begin_src emacs-lisp
  (defun clover-counsel-switch-buffer (regex-list) 
          (let ((ivy-ignore-buffers (append ivy-ignore-buffers regex-list))) 
                  (ivy-switch-buffer)))

  (defun clover-show-only-firefox-buffers () 
          (interactive) 
          (clover-ignore-star-and-buffers '("^[^F][^i][^r]")))

  (defun clover-show-only-brave-buffers () 
          (interactive) 
          (clover-ignore-star-and-buffers '("^[^B][^r][^a][^v][^e]")))

  (defun clover-ignore-star-buffers () 
          "ignore everything starting with a star along with whatever ivy's defaults are" 
          (interactive) 
          (clover-counsel-switch-buffer (append ivy-ignore-buffers '("^\*"))))

  (defun clover-ignore-star-and-buffers (regex-list) 
          (interactive) 
          (clover-counsel-switch-buffer (append ivy-ignore-buffers '("^\*") regex-list)))

  (general-define-key "C-x b" 'clover-ignore-star-buffers)
#+end_src
** Hydra Shortcuts
