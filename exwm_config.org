#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/desktop.el :mkdirp yes
* EXWM
** EXWM Startup Processes
#+begin_src emacs-lisp
  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    (eshell)

    ;; Show battery status in the mode line
    (display-battery-mode 1)

    ;; Show the time and date in modeline
    (setq display-time-day-and-date t)
    (setq display-time-format "%a %d %b %H:%M")
    (display-time-mode 1)
    ;; Also take a look at display-time-format and format-time-string

    ;; Launch apps that will run in the background
    ;; Network manager
    ;;(efs/run-in-background "nm-applet")
    ;; Pulse Audio
    ;;(efs/run-in-background "pasystray")
    )
#+end_src
** EXWM Start
#+begin_src emacs-lisp
  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun clover/exwm-update-title ()
    (exwm-workspace-rename-buffer (concat exwm-class-name ": " exwm-title)))

  (defun clover/exwm-lock-screen ()
    (start-process-shell-command "lock" nil "slock"))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    ;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)
    (add-hook 'exwm-update-title-hook #'clover/exwm-update-title)

    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

    ;; Rebind CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.Xmodmap")

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (exwm-randr-enable)
    ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

    ;; Load the system tray before exwm-init
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
	?\C-u
	?\C-h
	?\M-x
	?\M-`
	?\M-&
	?\M-:
	?\C-\M-j  ;; Buffer list
	?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
	  `(
	    ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)

	    ;; Move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)

	    ;; Launch applications via shell command
	    ([?\s-&] . (lambda (command)
			 (interactive (list (read-shell-command "$ ")))
			 (start-process-shell-command command nil command)))

	    ;; Switch workspace
	    ([?\s-w] . exwm-workspace-switch)
	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	    ;; Toggle char line mode
	    ([?\s-k] . exwm-input-toggle-keyboard)
	    ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
    (exwm-input-set-key (kbd "s-l") (lambda() (interactive) (clover/exwm-lock-screen)))

    (exwm-enable)
  )
#+end_src
** Desktop Environment Package
[[https://github.com/DamienCassou/desktop-environment][Desktop-Environment github page]]
