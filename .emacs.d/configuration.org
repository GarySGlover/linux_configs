* Basic Config
** Setup Package Repos
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  ;; (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Start emacs server
#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+end_src
** Remove startup message
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** Remove GUI components
#+begin_src emacs-lisp
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
#+end_src
** Renmove Unwanted Inbuilt Shortcuts
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x C-c"))
#+end_src
** Org Mode
*** Install latest org mode
#+begin_src emacs-lisp
  ;;(assq-delete-all 'org package--builtins)
  ;;(assq-delete-all 'org package--builtin-versions)
  ;;(use-package org
  ;;  :ensure t)
#+end_src
*** Babel shell mode
#+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)))
#+end_src
*** Org mode bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
*** Org templates
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
** Disable symbolic link notice
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Setup Themes
#+begin_src emacs-lisp
  ;; Set up the visible bell
  (setq visible-bell t)

  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)

  (use-package all-the-icons)
    :init
    (all-the-icons-install-fonts t)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
#+end_src
** Shortcut Keys
package - general
https://github.com/noctuid/general.el
https://www.youtube.com/watch?v=xaZMwNELaJY&t=820s
https://www.youtube.com/watch?v=xaZMwNELaJY&t=3260s
package - hydra
https://github.com/abo-abo/hydra
https://www.youtube.com/watch?v=xaZMwNELaJY&t=2975s
* Experience Helper Packagesn
** Package Rainbox Delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Package Which Key
** Package Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
#+end_src
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))
#+end_src
** Package IVY
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
** Package Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
* Project Management
** Projectile
Main Project
https://github.com/bbatsov/projectile
Projectile Documentation
https://docs.projectile.mx/projectile/index.html
Counsel Integration
https://github.com/ericdanan/counsel-projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  ;; Projectile Counsel
  (use-package counsel-projectile
   :after projectile
   :config
   (counsel-projectile-mode 1))

#+end_src

** Magit
Github page
https://github.com/magit/magit
Manual
https://magit.vc/manual/magit/
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Language Packages
** Powershell
#+begin_src emacs-lisp
  (use-package ob-powershell)
  (use-package powershell)
#+end_src
* EXWM
** EXWM Startup Processes
#+begin_src emacs-lisp
  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    (eshell)

    ;; Show battery status in the mode line
    (display-battery-mode 1)

    ;; Show the time and date in modeline
    (setq display-time-day-and-date t)
    (display-time-mode 1)
    ;; Also take a look at display-time-format and format-time-string

    ;; Launch apps that will run in the background
    ;; Network manager
    ;;(efs/run-in-background "nm-applet")
    ;; Pulsa Audio
    ;;(efs/run-in-background "pasystray")
    ;; Bluetooth applet
    ;;(efs/run-in-background "blueman-applet")
    )
#+end_src
** EXWM Start
#+begin_src emacs-lisp
  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun efs/exwm-update-title ()
    (exwm-workspace-rename-buffer (concat exwm-class-name ": " exwm-title)))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    ;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)
    (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

    ;; Rebind CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.Xmodmap")

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (exwm-randr-enable)
    ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

    ;; Load the system tray before exwm-init
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
	?\C-u
	?\C-h
	?\M-x
	?\M-`
	?\M-&
	?\M-:
	?\C-\M-j  ;; Buffer list
	?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
	  `(
	    ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)

	    ;; Move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)

	    ;; Launch applications via shell command
	    ([?\s-&] . (lambda (command)
			 (interactive (list (read-shell-command "$ ")))
			 (start-process-shell-command command nil command)))

	    ;; Switch workspace
	    ([?\s-w] . exwm-workspace-switch)
	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	    ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))

    (exwm-enable)
  )
#+end_src

